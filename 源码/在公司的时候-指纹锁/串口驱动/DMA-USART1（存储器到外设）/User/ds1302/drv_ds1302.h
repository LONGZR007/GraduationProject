/****************************************************************************************************
 * 描述：DS1302 时钟芯片驱动程序声明
 *
 * 作者：Gavin
 *
 * 版本：v1.0.0    日期：2018-05-10
 *                                                                              大连智海科技有限公司
*****************************************************************************************************/

#include "stm32f10x.h"

#ifndef DRV_DS1302_H
#define DRV_DS1302_H

#ifdef __cplusplus
 extern "C" {
#endif

struct rtc_time {
	u16 tm_sec;
	u16 tm_min;
	u16 tm_hour;
	u16 tm_mday;
	u16 tm_mon;
	u16 tm_year;
	u16 tm_wday;
};
	 
/* 管脚定义 */
#define DS_SCL_PORT_CLK    RCC_APB2Periph_GPIOG
#define DS_SCL_PORT        GPIOG         // 时钟线端口
#define DS_SCL_PIN         GPIO_Pin_15    // 时钟线管脚
	 
#define DS_SDA_PORT_CLK    RCC_APB2Periph_GPIOB
#define DS_SDA_PORT        GPIOB          // 数据线端口
#define DS_SDA_PIN         GPIO_Pin_3    // 数据线管脚
	 
#define DS_CE_PORT_CLK     RCC_APB2Periph_GPIOB
#define DS_CE_PORT         GPIOB          // 使能线端口
#define DS_CE_PIN          GPIO_Pin_4    // 使能线管脚

#define GPIO_BRR_SET(GPIOx, Pin)       (GPIOx->BRR = ((Pin) & 0xFFFF))     // 位清除寄存器设置
#define GPIO_BSR_SET(GPIOx, Pin)       (GPIOx->BSRR = ((Pin) & 0xFFFF))    // 位设置寄存器设置
#define GPIO_IDR_GET(GPIOx, Pin)       (GPIOx->IDR & ((Pin) & 0xFFFF))     // 输入数据寄存器位获取
	 
/* 数据结构定义 */
	 
typedef struct
{ 
    u8 second;    // 秒
    u8 minute;    // 分
    u8 hour;      // 小时
    u8 date;      // 日期
    u8 month;     // 月份
    u8 week;      // 星期
    u8 year;      // 年

}ds_time_t;       // 时间结构体

	 
typedef enum
{
	DS_TCS_EN  = 0xA0,    // 使能涓流充电
	DS_TCS_DIS = 0x00     // 禁用涓流充电
} ds_tcs_t;               // 充电功能选择

typedef enum
{
	DS_DS_1 = 0x4,    // 1 个二极管
	DS_DS_2 = 0x8     // 2 个二极管
} ds_ds_t;            // 二极管选择

typedef enum
{
	DS_RS_0K = 0x0,    // 无 电阻
	DS_RS_2K,          // 2k 电阻
	DS_RS_4K,          // 4K 电阻
	DS_RS_8K           // 8K 电阻
} ds_rs_t;             // 电阻选择
	 
/* 时钟芯片操作宏定义 */
	 
#define DS_WP_SET(val)          \
	 do {                       \
		 Send_Byte(0x8E);       \
		 Send_Byte((val) << 7); \
	 } while (0)                     // 写保护设置, FALSE = 解除写保护, TRUE = 设置写保护
	 
#define DS_PAUSE_SET(val)       \
	 do {                       \
		 DS_RST_SET(TRUE);      \
		 Send_Byte(0x80);       \
		 Send_Byte((val) << 7); \
		 DS_RST_SET(FALSE);     \
	 } while (0)                     // 时钟暂停设置, FALSE = 解除暂停, TRUE = 设置暂停
	 

/****************************************************************************************************
 * 描述：时钟芯片初始化
 *
 * 参数：无
 *
 * 返回：无
****************************************************************************************************/
	 
void DS_Init(void);
     
/****************************************************************************************************
 * 描述：BCD转十进制
 *
 * 参数：dt = 日期时间指针(BCD 编码, 依次为年(2位)、月、日、时、分、秒、周)
 *
 * 返回：无
****************************************************************************************************/
	 
void BCD_Metric_convert(struct rtc_time* time);

/****************************************************************************************************
 * 描述：十进制转BCD
 *
 * 参数：dt = 日期时间指针(十进制, 依次为年(2位)、月、日、时、分、秒、周)
 *
 * 返回：无
****************************************************************************************************/
	 
void Metric_BCD_convert(struct rtc_time* time);
	 
/****************************************************************************************************
 * 描述：日期时间设置
 *
 * 参数：dt = 日期时间指针(BCD 编码, 依次为年(2位)、月、日、时、分、秒、周)
 *
 * 返回：无
****************************************************************************************************/
	 
void DS_DateTime_Set(struct rtc_time* time);

/****************************************************************************************************
 * 描述：日期年设置
 *
 * 参数：Year = 2 位年份(BCD 编码)
 *
 * 返回：无
****************************************************************************************************/

void DS_Year_Set(u8 Year);

/****************************************************************************************************
 * 描述：日期月设置
 *
 * 参数：Mon = 月份(BCD 编码, 1 - 12)
 *
 * 返回：无
****************************************************************************************************/

void DS_Month_Set(u8 Mon);

/****************************************************************************************************
 * 描述：日期日设置
 *
 * 参数：Day = 日(BCD 编码, 1 - 31)
 *
 * 返回：无
****************************************************************************************************/

void DS_Day_Set(u8 Day);

/****************************************************************************************************
 * 描述：时间时设置
 *
 * 参数：Hour = 时(BCD 编码, 0 - 23(24 小时制)/1 - 12, Bit 5 = 上午/下午(1 = 下午, 0 = 上午)(12 小时制))
 *
 * 返回：无
****************************************************************************************************/

void DS_Hour_Set(u8 Hour);

/****************************************************************************************************
 * 描述：时间分设置
 *
 * 参数：Min = 分(BCD 编码, 0 - 59)
 *
 * 返回：无
****************************************************************************************************/

void DS_Minute_Set(u8 Min);

/****************************************************************************************************
 * 描述：时间秒设置
 *
 * 参数：Sec = 秒(BCD 编码, 0 - 59)
 *
 * 返回：无
****************************************************************************************************/

void DS_Second_Set(u8 Sec);

/****************************************************************************************************
 * 描述：日期周设置
 *
 * 参数：Week = 周(BCD 编码, 1 - 7)
 *
 * 返回：无
****************************************************************************************************/

void DS_Week_Set(u8 Week);

/****************************************************************************************************
 * 描述：时间模式设置
 *
 * 参数：Mode = 时间模式(TRUE = 12 小时制式, FALSE = 24 小时制式)
 *
 * 返回：无
****************************************************************************************************/

void DS_TimeMode_Set(u8 Mode);

/****************************************************************************************************
 * 描述：涓流充电设置
 *
 * 参数：TCS = 充电功能选择设置(参见数据结构定义)
 * 参数：DS  = 二极管选择设置(参见数据结构定义)
 * 参数：RS  = 电阻选择设置(参见数据结构定义)
 *
 * 返回：无
****************************************************************************************************/

void DS_TC_Set(ds_tcs_t TCS, ds_ds_t DS, ds_rs_t RS);

/****************************************************************************************************
 * 描述：涓流充电设置获取
 *
 * 参数：无
 *
 * 返回：涓流充电设置值(Bit 0-1 = 电阻选择设置, Bit 2-3 = 二极管选择设置, Bit 4-7 = 涓流充电选择)
****************************************************************************************************/

u8 DS_TC_Get(void);

/****************************************************************************************************
 * 描述：时间获取
 *
 * 参数：dt = 接收日期时间的指针(BCD 编码, 依次为年(2位)、月、日、时、分、秒、周)
 *
 * 返回：无
****************************************************************************************************/
	 
void DS_DateTime_Get(struct rtc_time* time);

/****************************************************************************************************
 * 描述：日期年获取
 *
 * 参数：无
 *
 * 返回：2 位年份(BCD 编码)
****************************************************************************************************/

u8 DS_Year_Get(void);

/****************************************************************************************************
 * 描述：日期月获取
 *
 * 参数：无
 *
 * 返回：月份(BCD 编码, 1 - 12)
****************************************************************************************************/

u8 DS_Month_Get(void);

/****************************************************************************************************
 * 描述：日期日获取
 *
 * 参数：无
 *
 * 返回：日(BCD 编码, 1 - 31)
****************************************************************************************************/

u8 DS_Day_Get(void);

/****************************************************************************************************
 * 描述：时间时获取
 *
 * 参数：无
 *
 * 返回：小时(BCD 编码, 0 - 23(24 小时制)/1 - 12, Bit 5 = 上午/下午(1 = 下午, 0 = 上午)(12 小时制))
****************************************************************************************************/

u8 DS_Hour_Get(void);

/****************************************************************************************************
 * 描述：时间分获取
 *
 * 参数：无
 *
 * 返回：分钟(BCD 编码, 0 - 59)
****************************************************************************************************/

u8 DS_Minute_Get(void);

/****************************************************************************************************
 * 描述：时间秒获取
 *
 * 参数：无
 *
 * 返回：秒钟(BCD 编码, 0 - 59)
****************************************************************************************************/

u8 DS_Second_Get(void);

/****************************************************************************************************
 * 描述：日期周获取
 *
 * 参数：无
 *
 * 返回：周(BCD 编码, 0 - 7)
****************************************************************************************************/

u8 DS_Week_Get(void);

/****************************************************************************************************
 * 描述：时钟芯片内存写入
 *
 * 参数：Addr = 写入地址(0 - 30, 共 31 个)
 * 参数：Dat  = 写入数据指针
 * 参数：Len  = 写入长度(1 - (30 - Addr))
 *
 * 返回：实际写入长度
****************************************************************************************************/

u8 DS_RAM_Write(u8 Addr, u8 *Dat, u8 Len);

/****************************************************************************************************
 * 描述：时钟芯片内存读取
 *
 * 参数：Addr = 读取地址(0 - 30, 共 31 个)
 * 参数：Dat  = 接收读取数据指针
 * 参数：Len  = 读取长度(1 - (30 - Addr))
 *
 * 返回：实际读取长度
****************************************************************************************************/

u8 DS_RAM_Read(u8 Addr, u8 *Dat, u8 Len);

	 
#ifdef __cplusplus
}
#endif

#endif /* DRV_DS1302_H */

/* End Of File */
